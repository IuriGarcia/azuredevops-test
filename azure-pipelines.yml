# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker
# task Docker input.repository é o nome da service connection do registry
# "- script" na verdade é uma task de bash

trigger:
- master

resources:
  repositories:
  - repository: self

variables:
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: Default
      demands: agent.name -equals AzDevOps-Agent
    steps:
    - task: Cache@2
      inputs:
        key: node_modules
        path: $(Build.SourcesDirectory)/node_modules
        
    # não tem ".terraform" ?
    # - task: Cache@2 
    #   inputs:
    #     key: ponto_terraform
    #     path: $(Build.SourcesDirectory)/.terraform

    - task: Docker@2
      displayName: Build an image
      inputs:
        containerRegistry: docker-hub
        repository: igar/azuredevops-test 
        command: buildAndPush
        dockerfile: '$(Build.SourcesDirectory)/app/Dockerfile'
        tags: |
          $(Build.BuildNumber)
          latest
          
- stage: Deploy
  displayName: Deploy
  jobs:
  - job: Deploy
    displayName: Deploy
    pool:
      name: Default
      demands: agent.name -equals AzDevOps-Agent
    steps:
    - task: Docker@2
      displayName: Docker Hub Login
      inputs:
        containerRegistry: docker-hub
        command: login
    - script: |
        docker run \
        --rm \
        -v $(Build.SourcesDirectory):/tmp/ \
        --entrypoint /bin/sh \
        -e TF_VAR_registry_username=$(TF_VAR_registry_username) \
        hashicorp/terraform:0.14.2 \
        -c 'ls /tmp/ && env'